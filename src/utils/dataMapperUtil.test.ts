import { mapBoardDataUtil, mapShotDataUtil } from './dataMapperUtil.ts';

import { mock_newBoard_player_1 } from '../../mockData/newBoard.ts';
import { mock_randomHits_player_1 } from '../../mockData/randomHits.ts';

describe('mapBoardDataUtil', () => {
  it('Should return mapped board data - SUCCESS', () => {
    const result = mapBoardDataUtil(mock_newBoard_player_1);
    const expectedResult = [
      { A1: '~' },
      { B1: '~' },
      { C1: '~' },
      { D1: '~' },
      { E1: '~' },
      { F1: 'D' },
      { G1: 'D' },
      { H1: 'D' },
      { I1: '~' },
      { J1: '~' },
      { A2: '~' },
      { B2: '~' },
      { C2: '~' },
      { D2: '~' },
      { E2: '~' },
      { F2: 'P' },
      { G2: 'P' },
      { H2: '~' },
      { I2: '~' },
      { J2: '~' },
      { A3: '~' },
      { B3: '~' },
      { C3: '~' },
      { D3: 'B' },
      { E3: 'B' },
      { F3: 'B' },
      { G3: 'B' },
      { H3: '~' },
      { I3: '~' },
      { J3: 'D' },
      { A4: 'A' },
      { B4: '~' },
      { C4: '~' },
      { D4: '~' },
      { E4: '~' },
      { F4: '~' },
      { G4: '~' },
      { H4: '~' },
      { I4: '~' },
      { J4: 'D' },
      { A5: 'A' },
      { B5: '~' },
      { C5: '~' },
      { D5: '~' },
      { E5: '~' },
      { F5: '~' },
      { G5: '~' },
      { H5: '~' },
      { I5: '~' },
      { J5: 'D' },
      { A6: 'A' },
      { B6: '~' },
      { C6: '~' },
      { D6: '~' },
      { E6: '~' },
      { F6: '~' },
      { G6: '~' },
      { H6: '~' },
      { I6: '~' },
      { J6: '~' },
      { A7: 'A' },
      { B7: '~' },
      { C7: '~' },
      { D7: '~' },
      { E7: '~' },
      { F7: '~' },
      { G7: '~' },
      { H7: '~' },
      { I7: '~' },
      { J7: '~' },
      { A8: 'A' },
      { B8: '~' },
      { C8: 'P' },
      { D8: '~' },
      { E8: '~' },
      { F8: '~' },
      { G8: '~' },
      { H8: '~' },
      { I8: '~' },
      { J8: '~' },
      { A9: '~' },
      { B9: '~' },
      { C9: 'P' },
      { D9: '~' },
      { E9: '~' },
      { F9: 'S' },
      { G9: 'S' },
      { H9: 'S' },
      { I9: '~' },
      { J9: '~' },
      { A10: '~' },
      { B10: '~' },
      { C10: '~' },
      { D10: 'S' },
      { E10: 'S' },
      { F10: 'S' },
      { G10: '~' },
      { H10: '~' },
      { I10: '~' },
      { J10: '~' },
    ];
    expect(result).toEqual(expectedResult);
  });
  it('Should FAIL due to too few board items', () => {
    // Remove 90 items from the board data
    const dataWithMissingItems = {
      data: [...mock_newBoard_player_1.data.slice(0, 10)],
    };
    const result = mapBoardDataUtil(dataWithMissingItems);
    expect(result).toEqual({ error: 'Invalid board data: should contain 100 items' });
  });
  it('Should FAIL due to invalid character', () => {
    // Add invalid character to the end of the board data
    const dataWithInvalidChar = {
      data: [...mock_newBoard_player_1.data.slice(0, 99), { J10: '7' }],
    };
    const result = mapBoardDataUtil(dataWithInvalidChar);
    expect(result).toEqual({ error: 'Invalid character in board data: 7' });
  });
});

describe('mapShotDataUtil', () => {
  it('Should return mapped shot data', () => {
    const result = mapShotDataUtil(mock_randomHits_player_1);
    const expectedResult = [
      'A5',
      'D7',
      'B2',
      'I6',
      'J7',
      'F2',
      'A2',
      'D6',
      'G10',
      'A9',
      'D10',
      'J2',
      'C8',
      'A1',
      'C10',
      'E3',
      'J9',
      'E10',
      'G9',
      'F1',
      'B1',
      'A6',
      'B10',
      'H2',
      'I5',
      'B6',
      'A3',
      'F3',
      'E9',
      'C5',
      'J8',
      'H8',
      'E6',
      'J5',
      'F6',
      'I7',
      'J4',
      'F8',
      'J3',
      'G1',
      'G3',
      'F10',
      'I3',
      'A8',
      'I10',
      'E7',
      'E2',
      'F9',
      'I1',
      'G5',
      'E4',
      'J6',
      'G2',
      'B4',
      'C3',
      'H3',
      'G4',
      'H7',
      'B9',
      'C4',
      'D3',
      'E1',
      'D4',
      'C7',
      'I8',
      'I9',
      'D9',
      'C9',
      'H4',
      'E8',
      'G8',
      'F4',
      'C6',
      'H6',
      'B3',
      'F5',
      'G7',
      'D5',
      'J1',
      'E5',
      'D1',
      'I2',
      'A4',
      'A7',
      'D8',
      'I4',
      'G6',
      'A10',
      'B8',
      'F7',
      'H9',
      'C2',
      'B7',
      'C1',
      'H5',
      'B5',
      'H1',
      'H10',
      'J10',
      'D2',
    ];
    expect(result).toEqual(expectedResult);
  });
  it('Should FAIL due to too few items', () => {
    // Remove 90 items from the shot data
    const dataWithMissingItems = {
      data: [...mock_randomHits_player_1.data.slice(0, 10)],
    };
    const result = mapShotDataUtil(dataWithMissingItems);
    expect(result).toEqual({ error: 'Invalid shot data: should contain 100 items' });
  });
});
